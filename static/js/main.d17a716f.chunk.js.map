{"version":3,"sources":["assets/js/constants.js","assets/js/useInterval.js","components/Clock.js","assets/icons/ClockIcon.js","assets/icons/TimerIcon.js","assets/icons/Play.js","assets/icons/Pause.js","components/Timer.js","App.js","serviceWorker.js","index.js"],"names":["TIME","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","Clock","useState","Date","toLocaleTimeString","time","setTime","className","ClockIcon","enableBackground","height","version","viewBox","width","fill","cx","cy","r","stroke","strokeLinecap","strokeMiterlimit","strokeWidth","points","TimerIcon","d","Play","Pause","Timer","isRunning","setIsRunning","input","setInput","parseTime","getUTCHours","getUTCMinutes","getSeconds","map","t","i","filter","join","autoFocus","type","value","onChange","e","target","onFocus","onBlur","hhmmss","split","index","length","newTime","val","Number","reduce","a","b","onClick","App","React","isTimer","setTimer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d17a716f.chunk.js","sourcesContent":["export const MS_PER_SECOND = 1000\nexport const MS_PER_MINUTE = 60 * MS_PER_SECOND\nexport const MS_PER_HOUR = 60 * MS_PER_MINUTE\nexport const TIME = [MS_PER_HOUR, MS_PER_MINUTE, MS_PER_SECOND]\n","import { useEffect, useRef } from 'react'\n\n/*\nReact Hook for setInterval\nCourtesy of Dan Abramov\n*/\nexport function useInterval(callback, delay) {\n    const savedCallback = useRef()\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback\n    }, [callback])\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            savedCallback.current()\n        }\n        if (delay !== null) {\n            let id = setInterval(tick, delay)\n            return () => clearInterval(id)\n        }\n    }, [delay])\n}\n","import React, { useState } from 'react'\nimport { useInterval, MS_PER_SECOND } from '../assets/js/'\nimport '../styles/Clock.css'\n\nexport const Clock = () => {\n    const [time, setTime] = useState(new Date().toLocaleTimeString())\n    useInterval(() => setTime(new Date().toLocaleTimeString()), MS_PER_SECOND)\n    return <div className=\"clock\">{time}</div>\n}\n","import React from 'react'\n\nexport const ClockIcon = () => (\n    <svg\n        enableBackground=\"new 0 0 50 50\"\n        height=\"50px\"\n        id=\"Layer_1\"\n        version=\"1.1\"\n        viewBox=\"0 0 50 50\"\n        width=\"50px\"\n    >\n        <rect fill=\"none\" height=\"50\" width=\"50\" />\n        <circle\n            cx=\"25\"\n            cy=\"25\"\n            fill=\"none\"\n            r=\"24\"\n            stroke=\"currentColor\"\n            strokeLinecap=\"round\"\n            strokeMiterlimit=\"10\"\n            strokeWidth=\"2\"\n        />\n        <circle cx=\"25\" cy=\"25\" r=\"3\" />\n        <polyline\n            fill=\"none\"\n            points=\"17,33 25,25 25,6   \"\n            stroke=\"currentColor\"\n            strokeLinecap=\"round\"\n            strokeMiterlimit=\"10\"\n            strokeWidth=\"2\"\n        />\n    </svg>\n)\n","import React from 'react'\n\nexport const TimerIcon = () => (\n    <svg\n        enableBackground=\"new 0 0 50 50\"\n        height=\"50px\"\n        id=\"Layer_1\"\n        version=\"1.1\"\n        viewBox=\"0 0 50 50\"\n        width=\"50px\"\n    >\n        <rect fill=\"none\" height=\"50\" width=\"50\" />\n        <path\n            d=\"M25,10V1  c13.256,0,24,10.745,24,24c0,13.256-10.744,24-24,24S1,38.256,1,25c0-6.624,2.684-12.622,7.022-16.965\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeLinecap=\"round\"\n            strokeMiterlimit=\"10\"\n            strokeWidth=\"2\"\n        />\n        <path d=\"M27.121,27.122c-1.171,1.171-3.07,1.172-4.242,0s-10.417-14.66-10.417-14.66s13.487,9.245,14.659,10.417  S28.293,25.951,27.121,27.122z\" />\n    </svg>\n)\n","import React from 'react'\n\nexport const Play = () => (\n    <svg\n        version=\"1.1\"\n        viewBox=\"0 0 139 139\"\n        width=\"139px\"\n    >\n        <path d=\"M117.037,61.441L36.333,14.846c-2.467-1.424-5.502-1.424-7.972,0c-2.463,1.423-3.982,4.056-3.982,6.903v93.188  c0,2.848,1.522,5.479,3.982,6.9c1.236,0.713,2.61,1.067,3.986,1.067c1.374,0,2.751-0.354,3.983-1.067l80.704-46.594  c2.466-1.422,3.984-4.054,3.984-6.9C121.023,65.497,119.502,62.866,117.037,61.441z\" />\n    </svg>\n)\n","import React from 'react'\n\nexport const Pause = () => (\n    <svg\n        version=\"1.1\"\n        viewBox=\"0 0 512 512\"\n        width=\"512px\"\n    >\n        <g>\n            <path d=\"M224,435.8V76.1c0-6.7-5.4-12.1-12.2-12.1h-71.6c-6.8,0-12.2,5.4-12.2,12.1v359.7c0,6.7,5.4,12.2,12.2,12.2h71.6   C218.6,448,224,442.6,224,435.8z\" />\n            <path d=\"M371.8,64h-71.6c-6.7,0-12.2,5.4-12.2,12.1v359.7c0,6.7,5.4,12.2,12.2,12.2h71.6c6.7,0,12.2-5.4,12.2-12.2V76.1   C384,69.4,378.6,64,371.8,64z\" />\n        </g>\n    </svg>\n)\n","import React, { useState } from 'react'\nimport { useInterval, MS_PER_MINUTE, MS_PER_SECOND, TIME } from '../assets/js/'\nimport { Play, Pause } from '../assets/icons/'\nimport '../styles/Timer.css'\n\nconst INIT_TIME = 20 * MS_PER_MINUTE\nconst INIT_INPUT = '20:00'\n\nexport const Timer = () => {\n    const [isRunning, setIsRunning] = useState(false)\n    const [time, setTime] = useState(INIT_TIME)\n    const [input, setInput] = useState(INIT_INPUT)\n\n    const handleTimeChange = () => {\n        const hhmmss = input.split(':')\n        let index = TIME.length - hhmmss.length\n        const newTime = hhmmss\n            .map(val => Number(val) * TIME[index++])\n            .reduce((a, b) => a + b)\n        setTime(newTime)\n        setInput(parseTime(newTime))\n    }\n\n    const handleStartTimer = () => {\n        setIsRunning(!isRunning)\n    }\n\n    useInterval(\n        () => {\n            if(time - MS_PER_SECOND === 0) setIsRunning(false)\n            setTime(time - MS_PER_SECOND)\n        },\n        isRunning ? MS_PER_SECOND : null\n    )\n\n    const parseTime = time => {\n        const d = new Date(time)\n        const hh = d.getUTCHours()\n        const mm = d.getUTCMinutes()\n        const ss = d.getSeconds()\n\n        return [hh, mm, ss]\n            .map((t, i) =>\n                t !== 0 ? (t < 10 ? '0' + t : t) : i === 2 ? '00' : t\n            )\n            .filter(t => t)\n            .join(':')\n    }\n\n    return (\n        <div className=\"timer\">\n            <input\n                autoFocus\n                type=\"text\"\n                value={isRunning ? parseTime(time) : input}\n                onChange={e => setInput(e.target.value)}\n                onFocus={() => setIsRunning(false)}\n                onBlur={handleTimeChange}\n            />\n            <span>\n                <button onClick={handleStartTimer}>\n                    {isRunning ? <Pause /> : <Play />}\n                </button>\n            </span>\n        </div>\n    )\n}\n","import React from 'react'\nimport { Clock, Timer } from './components/'\nimport { ClockIcon, TimerIcon } from './assets/icons/'\nimport './styles/App.css'\n\nfunction App() {\n    const [isTimer, setTimer] = React.useState(true)\n    return (\n        <div className=\"App\">\n            {isTimer ? <Timer /> : <Clock />}\n            <span className='settings'>\n                <button className={isTimer ? 'active' : ''} onClick={() => setTimer(true)}>\n                    <TimerIcon />\n                </button>\n                <button className={isTimer ? '' : 'active'} onClick={() => setTimer(false)}>\n                    <ClockIcon />\n                </button>\n            </span>\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}